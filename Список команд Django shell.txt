После запуска Django shell ввод команды: from news.models import *

1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).
>>> u1 = User.objects.create_user(username='Vika')
>>> u1
<User: Vika>
>>> u2 = User.objects.create_user(username='Dany') 
>>> u2
<User: Dany>

2. Создать два объекта модели Author, связанные с пользователями.
>>> Author.objects.create(authorUser=u1)
<Author: Author object (1)>
>>> Author.objects.create(authorUser=u2) 
<Author: Author object (2)>

3. Добавить 4 категории в модель Category.
>>> Category.objects.create(name='Science')
<Category: Category object (1)>
>>> Category.objects.create(name='Technique')
<Category: Category object (2)>
>>> Category.objects.create(name='Technology')
<Category: Category object (3)>
>>> Category.objects.create(name='IT')     
<Category: Category object (4)>

4. Добавить 2 статьи и 1 новость.
1 новость:
Получение автора:
>>> author = Author.objects.get(id=1)
>>> author
<Author: Author object (1)>
Создание новости:
>>> Post.objects.create(author=author, categoryType='NW', title='sciencetitle', text='bigtextaboutscience')
<Post: Post object (1)>
Получение новости по названию:
>>> Post.objects.get(id=1).title 
'sciencetitle'

2 статьи:
Получение автора:
>>> aut = Author.objects.get(id=2)
>>> aut
<Author: Author object (2)>
Создание 1-ой статьи:
>>> Post.objects.create(author=aut, categoryType='AR', title='technologytitle', text='bigtextabouttechnology')
<Post: Post object (2)>
Получение статьи по ее названию:
>>> Post.objects.get(id=2).title 
'technologytitle'
Создание 2-ой статьи:
>>> Post.objects.create(author=aut, categoryType='AR', title='ITtitle', text='anytextaboutIT')
<Post: Post object (3)>
Получение 2-ой статьи по ее названию:
>>> Post.objects.get(id=3).title 
'ITtitle'

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))  
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=4)) 
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=2)) 
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='anytextaboutnews')
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='anytextbyauthor')  
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='anytextaboutarticle')
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text='anytextbyVika') 
<Comment: Comment object (4)>

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Применяя функцию like() к 1 комментарию, получаем рейтинг этого объекта:
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).rating
1
Трижды применяя функцию dislike() к 1 комментарию, получаем рейтинг данного объекта:
>>> Comment.objects.get(id=1).dislike()
>>> Comment.objects.get(id=1).dislike()  
>>> Comment.objects.get(id=1).dislike()  
>>> Comment.objects.get(id=1).rating     
-2
Применяя функцию like() к 3 посту (статья), получаем рейтинг этого объекта:
>>> Post.objects.get(id=3).like()      
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).like()
>>> Post.objects.get(id=3).rating
3
После применения функции dislike() к 3 посту, рейтинг изменился:
>>> Post.objects.get(id=3).dislike() 
>>> Post.objects.get(id=3).dislike() 
>>> Post.objects.get(id=3).rating
1

8. Обновить рейтинги пользователей.
Применение переменной а для 1-го автора и вывод рейтинга этого автора:
>>> a = Author.objects.get(id=1)
>>> a.update_rating()
>>> a.ratingAuthor
1

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
Сортировка авторов:
>>> a = Author.objects.order_by('-ratingAuthor') 
>>> a
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>]>
Возвращение поля 1-го объекта:
>>> a = Author.objects.order_by('-ratingAuthor')[:1] 
>>> a
<QuerySet [<Author: Author object (1)>]>
Вывод username и рейтинг лучшего пользователя:
>>> Author.objects.order_by('-ratingAuthor').values('authorUser__username', 'ratingAuthor')[0]
{'authorUser__username': 'Vika', 'ratingAuthor': 1}

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> a = Post.objects.order_by('-rating').values('dateCreation', 'author__authorUser__username', 'rating', 'title')[0]
>>> a
{'dateCreation': datetime.datetime(2023, 2, 8, 19, 28, 34, 902383, tzinfo=datetime.timezone.utc), 'author__authorUser__username': 'Vika',
 'rating': 1, 'title': 'sciencetitle'}
Превью лучшей статьи:
Получение всех объектов постов:
>>> Post.objects.order_by('-rating')
<QuerySet [<Post: Post object (1)>, <Post: Post object (3)>, <Post: Post object (2)>]>
Наибольший рейтинг:
>>> Post.objects.order_by('-rating')[0]
<Post: Post object (1)>
Обращение к превью лучшей статьи:
>>> Post.objects.order_by('-rating')[0].preview()
'bigtextaboutscience...'

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
Объект лучшей статьи:
>>> Post.objects.order_by('-rating')[0]
<Post: Post object (1)>
Получение всех связанных с постом комментарий:
>>> Post.objects.order_by('-rating')[0].comment_set.all()
<QuerySet [<Comment: Comment object (1)>, <Comment: Comment object (2)>]>
Вывод всех нужных полей:
>>> Post.objects.order_by('-rating')[0].comment_set.all().values('dateCreation', 'commentUser__username', 'rating', 'text')  
<QuerySet [{'dateCreation': datetime.datetime(2023, 2, 8, 20, 4, 11, 106848, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Vika',
'rating': -2, 'text': 'anytextaboutnews'}, {'dateCreation': datetime.datetime(2023, 2, 8, 20, 5, 22, 902606, tzinfo=datetime.timezone.utc),
'commentUser__username': 'Dany', 'rating': 0, 'text': 'anytextbyauthor'}]>
